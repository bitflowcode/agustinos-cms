// api/upload-image.js - Proxy corregido para upload de imágenes
import axios from 'axios';

export const config = {
  api: {
    bodyParser: false,
    responseLimit: false,
  },
};

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST');
  res.setHeader('Access-Control-Allow-Headers', 'Authorization, Content-Type');

  try {
    console.log('🚀 [UPLOAD] Proxying image upload...');
    console.log('🔗 Content-Type:', req.headers['content-type']);
    console.log('🔑 Authorization:', req.headers.authorization ? 'Present' : 'Missing');
    
    // SOLUCIÓN COMPLETA: URL correcta + headers completos + streaming + auth
    const response = await axios.post(
      'http://49.12.239.163:3002/api/upload/image',  // ✅ URL con puerto correcto
      req,  // ✅ Stream del request directo
      {
        headers: {
          'Authorization': req.headers.authorization || '',  // ✅ Token JWT requerido
          'Content-Type': req.headers['content-type'] || '', // ✅ multipart/form-data con boundary
          'host': undefined, // ✅ Limpiar host header
        },
        responseType: 'stream',     // ✅ Response como stream
        maxContentLength: Infinity,  // ✅ Sin límite de contenido
        maxBodyLength: Infinity,     // ✅ Sin límite de body
        timeout: 30000,             // ✅ 30 segundos timeout
      }
    );

    console.log('✅ [UPLOAD] Response status:', response.status);
    
    // ✅ Configurar headers de respuesta
    res.setHeader('Content-Type', response.headers['content-type'] || 'application/json');
    
    // ✅ Stream directo sin cargar en memoria - EVITA ERROR 500
    response.data.pipe(res);

  } catch (error) {
    console.error('❌ [UPLOAD] Error:', error.message);
    
    if (error.response) {
      console.error('📋 Error status:', error.response.status);
      console.error('📋 Error headers:', Object.keys(error.response.headers || {}));
      
      res.status(error.response.status);
      
      // Si la respuesta es stream, hacer pipe
      if (error.response.data && typeof error.response.data.pipe === 'function') {
        error.response.data.pipe(res);
      } else {
        // Si no es stream, devolver error JSON
        res.json({ 
          success: false,
          error: 'Backend error', 
          status: error.response.status,
          details: error.response.statusText
        });
      }
    } else if (error.code === 'ECONNREFUSED') {
      res.status(503).json({
        success: false,
        error: 'Cannot connect to backend server',
        details: 'Backend server is not running or unreachable'
      });
    } else {
      res.status(500).json({
        success: false,
        error: 'Proxy error',
        details: error.message
      });
    }
  }
}